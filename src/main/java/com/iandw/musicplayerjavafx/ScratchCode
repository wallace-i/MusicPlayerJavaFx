
//        try() {
            // Load track metadata
//            metadataHashMap = MetadataFileIO.initializeMetadataFile(rootMusicDirectoryString, artistNameListView);

//        } catch (FileNotFoundException e) {
//            System.err.println("Metadata File not found");
//        }

****************************************************************************************************

    private void filePath() {
        String trackFileName = trackTableView.getSelectionModel().getSelectedItem().getTrackFileNameStr();
        trackTitleString = trackTableView.getSelectionModel().getSelectedItem().getTrackTitleStr();
        String albumDirectoryString = trackTableView.getSelectionModel().getSelectedItem().getAlbumDirectoryStr();
        albumTitleString = trackTableView.getSelectionModel().getSelectedItem().getAlbumTitleStr();
        currentPath = rootMusicDirectoryString + File.separator + artistNameString + File.separator + albumDirectoryString +
                File.separator + trackFileName;
    }

****************************************************************************************************

// read to temp file
// Json file for reading metadata directly from file instead of parsing through
    // Media objects in ArtistLibrary
    // [
    //      {"artistName": {"trackTitle": "trackFileName/trackContainerType/trackTitle/albumDirectory/trackAlbum/trackGenre/totalDuration"}}
    // ]
        JSONArray artistObjectList = new JSONArray();
        System.out.println(trackArray.isEmpty());
        System.out.println("writing to MetadataHashMap.json");
        for (Track track : trackArray) {
            JSONObject metaDataObject = new JSONObject();
            String metaDataString = track.getTrackFileNameStr() + separator + track.getTrackContainerTypeStr() +
                    separator + track.getTrackTitleStr() + separator + track.getAlbumDirectoryStr() + separator +
                    track.getAlbumTitleStr() + separator + track.getTrackGenreStr() + separator + track.getTrackDurationStr();

            metaDataObject.put(track.getTrackTitleStr(), metaDataString);
            System.out.printf("Metadata String: %s", metaDataObject);

            JSONObject artistObject = new JSONObject();
            artistObject.put(artistNameString, metaDataObject);
            System.out.printf("Artist Object: %s", artistObject);

            artistObjectList.add(artistObject);
            System.out.printf("ArtistObjectList: %s", artistObjectList);

        }

        try (FileWriter file = new FileWriter(ResourceURLs.getMetadataHashMapURL())) {
            file.write(artistObjectList.toJSONString());
            file.flush();

        } catch (IOException e) {
            e.printStackTrace();
        }



    }

****************************************************************************************************

                                    // Use wrapper to output metadata collected inside listener to list array
                                    // for use in serializing the data to a file.
    //                                var wrapper = new Object() {  String artistName;
    //                                                              String trackFileName;
    //                                                              String trackContainerType;
    //                                                              String trackTitle;
    //                                                              String albumDirectory;
    //                                                              String trackAlbum;
    //                                                              String trackGenre;
    //                                                              Duration duration;
    //                                };


                                            // Load wrapper with metadata
    //                                        wrapper.artistName = artistName;
    //                                        wrapper.trackFileName = trackFileName;
    //                                        wrapper.trackContainerType = trackContainerType;
    //                                        wrapper.trackTitle = trackTitle;
    //                                        wrapper.albumDirectory = albumDirectory;
    //                                        wrapper.trackAlbum = trackAlbum;
    //                                        wrapper.trackGenre = trackGenre;
    //                                        wrapper.duration = mediaPlayer.getTotalDuration();

                                    // Add track data to ArrayList
                                    //System.out.printf("wrapperartist:%s%n", wrapper.artistName);
    //                                Track tempTrack = new Track(
    //                                        wrapper.artistName,
    //                                        wrapper.trackFileName,
    //                                        wrapper.trackContainerType,
    //                                        wrapper.trackTitle,
    //                                        wrapper.albumDirectory,
    //                                        wrapper.trackAlbum,
    //                                        wrapper.trackGenre,
    //                                        wrapper.duration
    //                                );

    //                                trackArrayList.add(tempTrack);



****************************************************************************************************






                // Check map for key, populate trackTableView with value if true
//                if (metadataHashMap.containsKey(artistNameString)) {
//                    System.out.println("Reading from MetadataHashMap.ser");
//                    trackList = metadataHashMap.getTrackList(artistNameString);
//                    trackTableView.setItems(trackList);
//                    tableSize = metadataHashMap.getNumberOfTracks();
//
//                } else {
                    // Populate directly from artist directory, then write to map
//                    System.out.println("Reading from directory");




                        // write metadata to file
    //                    Metadata artistMetadata = new Metadata(trackList, artistNameString);
    //                    MetadataFileIO.metadataHashMapOutput(artistMetadata.getMetadata());





    //                }

****************************************************************************************************

    private void searchTree(String searchText) throws IOException {
            System.out.println("searching...");
            String result = searchTreeMap.searchForKey(searchText.toLowerCase());

            if (result == null) {
                searchField.setText("Not Found.");

            } else  {
                searching = true;
                artistNameValue = result.substring(0, result.indexOf(File.separator));
                String trackIndexValueStr = result.substring(result.indexOf(File.separator) + 1);
                trackIndexValue = Integer.parseInt(trackIndexValueStr);

                if (playing) {
                    stopMedia(true);
                }

                // if not searching for artist, select the corresponding track in tableview
                if (!trackIndexValueStr.equals("null")) {
                    //TODO => Exception in thread "JavaFX Application Thread" java.lang.IndexOutOfBoundsException: Index 7 out of bounds for length 0
                    listViewSelected();
                    tableViewSelected();

                } else {
                    listViewSelected();
                }
            }

        }


****************************************************************************************************


            private void searchFilePath() {
                artistNameString = artistNameValue;
                String trackFileName = trackTableView.getItems().get(trackIndexValue).getTrackFileNameStr();
                System.out.println(trackFileName);
                trackTitleString = trackTableView.getItems().get(trackIndexValue).getTrackTitleStr();
                String albumDirectoryString = trackTableView.getItems().get(trackIndexValue).getAlbumDirectoryStr();
                albumTitleString = trackTableView.getItems().get(trackIndexValue).getAlbumTitleStr();
                currentPath = rootMusicDirectoryString + File.separator + artistNameString + File.separator + albumDirectoryString +
                        File.separator + trackFileName;

            }





                @FXML
                private void handleSearchEnterPressed() {
            //        searchField.setOnKeyPressed( event -> {
            //            if (event.getCode() == KeyCode.ENTER) {
            //                try {
            //                    searchTree(searchField.getText());
            //                } catch (IOException e) {
            //                    throw new RuntimeException(e);
            //                }
            //            }
            //        });
                }